Class {
	#name : #AnAllyCardTest,
	#superclass : #TestCase,
	#category : #'IngSoft2-Tests'
}

{ #category : #running }
AnAllyCardTest >> test_01_WhenAnAllyCardIsAplyThenBothShipsGetsAnActiveCard [ 

| aCard aShip anotherShip aCollectionOfShips  |
	aCard:= AllyCard new.
	aShip := Ship createWithMaxFuel: 1000.
	anotherShip := Ship createWithMaxFuel: 1000.
	aCollectionOfShips:=OrderedCollection new.
	aCollectionOfShips add:aShip.
	aCollectionOfShips add:anotherShip.	

	aCard aplyEffectFrom: aShip to: anotherShip withShips: aCollectionOfShips.
		
	
self assert:((anotherShip getActiveCards at:1) isKindOf:AllyCard).
self assert:((aShip getActiveCards at:1) isKindOf:AllyCard).



]

{ #category : #running }
AnAllyCardTest >> test_02_WhenAnAllyCardIsAplyThenBothKnowTheirAlly [

| aCard aShip anotherShip aCollectionOfShips  |
	aCard:= AllyCard new.
	aShip := Ship createWithMaxFuel: 1000.
	anotherShip := Ship createWithMaxFuel: 1000.
	aCollectionOfShips:=OrderedCollection new.
	aCollectionOfShips add:aShip.
	aCollectionOfShips add:anotherShip.	

	aCard aplyEffectFrom: aShip to: anotherShip withShips: aCollectionOfShips.
		
	
self assert:((anotherShip getActiveCards at:1) getAlly = aShip).
self assert:((aShip getActiveCards at:1) getAlly = anotherShip).



]

{ #category : #running }
AnAllyCardTest >> test_03_AnAllyCardMessageIsBeingRefactor [ 

	| anAllyCard aShip anotherShip aBoardGame boxesArray aBoard aCollectionOfDice aLoadedDie anotherLoadedDie shipsPlaying |
	anAllyCard := AllyCard new.
	boxesArray := OrderedCollection new.
	boxesArray add: (NoEffectBox  inPlace: 1).
	boxesArray add: (NoEffectBox inPlace: 2).
	boxesArray add: (NoEffectBox inPlace: 3).
	boxesArray add: (NoEffectBox inPlace: 4).
	aBoard := Board withBoxesArray: boxesArray.
	aCollectionOfDice := OrderedCollection new.
	aLoadedDie := LoadedDie of: 50.
	anotherLoadedDie := LoadedDie of: 40.
	aCollectionOfDice add: aLoadedDie.
	aCollectionOfDice add: anotherLoadedDie.
	aBoardGame := BoardGame
		              withShip: 3
		              withBoard: aBoard
		              WithDice: aCollectionOfDice
		              andwithNumberOfLaps: 2.
	shipsPlaying := aBoardGame getShipsPlaying.
	aShip := shipsPlaying at: 1.
	anotherShip := shipsPlaying at: 2. 
	
	self assert: ((anAllyCard affectTo: aShip from: anotherShip playing: aBoardGame) isKindOf: AllyCard ).



]
